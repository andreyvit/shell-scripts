#! /bin/bash

# cannot include git-sh-init here
git_editor() {
	: "${GIT_EDITOR:=$(git config core.editor)}"
	: "${GIT_EDITOR:=${VISUAL:-${EDITOR}}}"
	case "$GIT_EDITOR,$TERM" in
	,dumb)
		echo >&2 "No editor specified in GIT_EDITOR, core.editor, VISUAL,"
		echo >&2 "or EDITOR. Tried to fall back to vi but terminal is dumb."
		echo >&2 "Please set one of these variables to an appropriate"
		echo >&2 "editor or run $0 with options that will not cause an"
		echo >&2 "editor to be invoked (e.g., -m or -F for git-commit)."
		exit 1
		;;
	esac
	eval "${GIT_EDITOR:=vi}" '"$@"'
}

cont=true
bare=""
remote=
symlink_dir=
symlink_name=
symlink_user=false
add_description=false
dry_run=
while $cont && test -n "$1"; do
  case $1 in
    --bare | -b)
      bare=true
      shift;;
    --nobare | -B)
      bare=false
      shift;;
    --dry-run | -n)
      dry_run=echo
      shift;;
    --remote | -r)
      shift
      remote="$1"
      shift;;
    --link-dir | -L)
      shift
      symlink_dir="$1"
      shift;;
    --link)
      shift
      symlink_name="$1"
      shift;;
    --description | -d)
      add_description=true
      shift;;
    --include-user-name | -u)
      symlink_user=true
      shift;;
    --help)
      echo "Initializes a remote Git repository over SSH."
      echo "Usage:"
      me="$(basename "$0")"
      options="[--bare | --nobare] [--remote r] [--link dir]"
      echo "  $me $options ssh://host.com:22//path/to/repos.git"
      echo "  $me $options ssh://host.com:2222/~user/path/to/repos"
      echo "  $me $options host.com:/path/to/repos"
      echo "  $me $options host.com:~user/path/to/repos.git"
      echo ""
      echo "By default the repositories ending with \".git\" are bare, and all others are not."
      echo "To override the default use --bare (-b) or --nobare (-n)."
      echo ""
      echo "-r, --remote <foo> will invoke git-remote to register the repository url under the given name."
      echo ""
      echo "-L, --link-dir <dir>     makes a symlink to the repository on the server (for gitweb)."
      echo "    --link <name>        gives a name to the symlink (default is 'reponame.git')."
      echo "-u, --include-user-name  changes the default symlink name into 'username-reponame.git'."
      echo ""
      echo "-d, --description        ask for repository description (for gitweb)"
      exit;;
    -*)
      echo "Unknown option $1. Run $(basename "$0") --help for help."
      exit 200;;
    *)
      cont=false;;
  esac
done

url="$1"
case $url in
  ssh://*)
    x="${url#ssh://}"
    repos_path="${x#*/}"
    host_n_port="${x%/$repos_path}"
    host="${host_n_port%:*}"
    port="${host_n_port#$host}"
    port="${port#:}"
    ;;
  *:*)
    x="$1"
    repos_path="${x#*:}"
    host="${x%:$repos_path}"
    port=""
    ;;
  *)
    echo "Bad remote repository: $url."
    echo "Accepted are ssh://foo.bar/~/boz and foo.bar:~/boz urls."
    exit
esac

test -n "$bare" || if test "$repos_path" == "${repos_path%.git}"; then bare=false; else bare=true; fi

test -n "$port" || port=22
$bare && git_dir="$repos_path"
$bare || git_dir="$repos_path/.git"
if test -z "$symlink_name"; then
  symlink_name="$(basename "$repos_path")"
  $symlink_user && symlink_name="\$USER-$symlink_name"
  symlink_name="${symlink_name%.git}.git"
fi

symlink_code=
test -n "$symlink_dir" && symlink_code="&& ( cd $symlink_dir; ln -s $git_dir $symlink_name )"
$dry_run ssh -p $port $host "mkdir -p $repos_path && cd $repos_path && GIT_DIR=$git_dir git-init && cd $git_dir && echo '$url' > cloneurl $symlink_code"
test -n "$remote" && $dry_run git-remote add "$remote" "$url"

if $add_description; then
  f="$(mktemp -t descr)"
  f2=$f.2
  (
    echo
    echo "# Enter a description for repository $url"
    echo "# Lines starting with # are ignored."
  )>$f
  $dry_run git_editor $f
  sed -e '/^#/d' <$f >$f2
  $dry_run scp -P $port $f2 $host:$git_dir/description
  rm -f $f $f2
fi
